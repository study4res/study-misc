https://try.github.io/levels/1/challenges/10
https://try.github.io/levels/1/challenges/11 що таке ориджин? нащо там -u?


якщо були зміни в файл, а потім цей файл видалили в іншій гілці - чи буде конфлікт? 

на кожну гілку окремо треба робити пуш?

команда ls -la якісь папки з однією і з двома крапками зявляються. що це за папки?

як перейти з командного рядка в Гіт в інший проект!

як взагалі зробити декілька удаленних репозиторіїв?

якщо різні проекти і в різні репозиторії треба пуш, Гіт буде знати, що за яким пушем закріплено (параметр -u ?)

як в командному рядку дивитись що знаходиться в кожній із гілок?

що значить ремоут і оріджин?
git remote add origin https://github.com/try-git/try_git.git
Git doesn't care what you name your remotes, but it's typical to name your main one origin.

що таке Active branches в GitHub?

.gitignore стає невидим в гілці "master"

коли перший коміт навіщо це?
git branch --unset-upstream

коли перший пуш?
git push --set-upstream origin master



коли я створюю файли в ВІМ і потім їх додаю, то осб таке попередження виходить (github я реєстрував з віндовса і
сам гіт встановлений на віндовс)

warning: LF will be replaced by CRLF in second.txt.
The file will have its original line endings in your working directory.

нова ветка і в ній нові файли
$ git push
fatal: The current branch test2 has no upstream branch.
To push the current branch and set the remote as upstream, use
 git push --set-upstream origin test2

Конспект:
-додати існуючий проект
git init
git remote add <name -"origin"> <url>
git push -u origin master
#The name of our remote is origin and the default local branch name is master. 
#The -u tells Git to remember the parameters, so that next time we can simply run 
#git push and Git will know what to do. Go ahead and push it!

#When you start to get the hang of git you can do some really cool things with <hooks> when you push.
#For example, you can upload directly to a webserver whenever you push to your master remote instead 
#of having to upload your site with an ftp client. Check out Customizing Git - Git Hooks for more information.

-так правильно додавати нову ветку:
git push origin test

-різні команди:
git add 
git commit -m "commentary"
git push

git branch <>
git checkout <branch>
git checkout -b <branch> - зразу перейти в нову гілку

git merge <branch> -- буде обєднання з поточною гілкою. після цього "git push"
git branch -d <branch name> --to delete a branch. You'll notice that git branch -d bad_feature doesn't work. 
This is because -d won't let you delete something that hasn't been merged.
You can either add the --force (-f) option or use -D which combines -d -f together into one command.

git log -- Think of Git's log as a journal that remembers all the changes we've committed 
so far, in the order we committed them

Use git log --summary to see more information for each commit. 
You can see where new files were added for the first time or where files were deleted.
It's a good overview of what's going on in the project.

git diff HEAD -- показати відмінності. The HEAD is a pointer that holds your position
within all your different commits. By default HEAD points to your most recent commit, 
so it can be used as a quick way to reference that commit without having to look up the SHA.
git diff --staged --відмінності у файлах staged
git reset <file> --you can unstage files by using this command.

git checkout -- <target>  --Files can be changed back to how they were at the last commit by using this command


git rm -r folder_of_cats --This will recursively remove all folders and files from the given directory.

If you happen to delete a file without using 'git rm' you'll find that you 
still have to 'git rm' the deleted files from the working tree. 
You can save this step by using the '-a' option on 'git commit', 
which auto removes deleted files with the commit.

git commit -am "Delete stuff"